//
//  StyleKit.swift
//  Grocery
//
//  Created by James Robert on 7/8/14.
//  Copyright (c) 2014 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

class StyleKit : NSObject {

    //// Cache

    struct Cache {
        static var mainColor: UIColor = UIColor(red: 1.000, green: 0.502, blue: 0.192, alpha: 1.000)
        static var mainColorLight: UIColor = mainColor.colorWithHighlight(0.92)
    }

    //// Initialization

    override class func load() {
    }

    //// Colors

    class var mainColor: UIColor { return Cache.mainColor }
    class var mainColorLight: UIColor { return Cache.mainColorLight }

    //// Drawing Methods

    class func drawCheckbox(isChecked: Bool) {

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(0.5, 0.5, 11, 11), cornerRadius: 2.5)
        StyleKit.mainColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        if (isChecked)
        {
            //// Rectangle 2 Drawing
            let rectangle2Path = UIBezierPath(roundedRect: CGRectMake(3, 3, 6, 6), cornerRadius: 1.5)
            StyleKit.mainColor.setFill()
            rectangle2Path.fill()
        }
    }

    //// Generated Images

    class func imageOfCheckbox(isChecked: Bool) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(12, 12), false, 0)
        StyleKit.drawCheckbox(isChecked)
        var imageOfCheckbox = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCheckbox!
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor  {
        var saturation = 1.0, brightness = 1.0, alpha = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor  {
        var hue = 1.0, brightness = 1.0, alpha = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor  {
        var hue = 1.0, saturation = 1.0, alpha = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor  {
        var hue = 1.0, saturation = 1.0, brightness = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor  {
        var red = 1.0, green = 1.0, blue = 1.0, alpha = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor  {
        var red = 1.0, green = 1.0, blue = 1.0, alpha = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}

@objc protocol StyleKitSettableImage {
    var image: UIImage! { get set }
}

@objc protocol StyleKitSettableSelectedImage {
    var selectedImage: UIImage! { get set }
}
